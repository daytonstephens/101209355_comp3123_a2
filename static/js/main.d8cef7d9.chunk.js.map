{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","str","useState","query","setQuery","weather","setWeather","className","main","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","axios","get","then","response","console","log","data","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","id","src","icon","alt","Math","round","temp","description","replace","txt","charAt","toUpperCase","substr","toLowerCase","temp_min","temp_max","humidity","wind","speed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAGMA,EACC,mCADDA,EAEE,2CAuFOC,MAnFf,WAAgB,IAgBYC,EAhBb,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAiCb,OACE,qBAAKC,UAAmC,oBAAhBF,EAAQG,KAAqD,SAA5BH,EAAQA,QAAQ,GAAGG,KAAmB,WAC9D,YAA5BH,EAAQA,QAAQ,GAAGG,KAAsB,cACb,YAA5BH,EAAQA,QAAQ,GAAGG,KAAsB,cACb,UAA5BH,EAAQA,QAAQ,GAAGG,KAAoB,YACX,SAA5BH,EAAQA,QAAQ,GAAGG,KAAmB,WACV,WAA5BH,EAAQA,QAAQ,GAAGG,KAAqB,aAAgB,MAAS,MALtE,SAME,iCACE,qBAAKD,UAAU,aAAf,SACE,uBACEE,KAAK,OACLF,UAAU,aACVG,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOC,QACjCA,MAAOX,EACPY,WA5CK,SAAAC,GACG,UAAZA,EAAIC,KACNC,IAAMC,IAAN,UAAapB,EAAb,qBAAkCI,EAAlC,+BAA8DJ,IAC7DqB,MAAK,SAAUC,GAEdC,QAAQC,IAAIF,EAASG,MACrBlB,EAAWe,EAASG,MACpBpB,EAAS,YAwCgB,oBAAhBC,EAAQG,KACjB,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQoB,KAAnC,KAA2CpB,EAAQqB,IAAIC,WACvD,qBAAKpB,UAAU,OAAf,SAlCU,SAACqB,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAyBHE,CAAY,IAAIC,WAEzC,sBAAK/B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACE,qBACEgC,GAAG,cACHC,IAAG,2CAAsCnC,EAAQA,QAAQ,GAAGoC,KAAzD,WACHC,IAAI,yBAELC,KAAKC,MAAMvC,EAAQG,KAAKqC,MAN3B,WAQA,qBAAKtC,UAAU,UAAf,UAlDgBN,EAmDII,EAAQA,QAAQ,GAAGyC,YAjDxC7C,EAAI8C,QAAQ,UAAU,SAASC,GAAK,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,OAAO,GAAGC,oBAmDtF,sBAAK7C,UAAU,YAAf,kBACQF,EAAQG,KAAK6C,SADrB,0BAEQhD,EAAQG,KAAK8C,SAFrB,8BAGYjD,EAAQG,KAAK+C,SAHzB,uBAISlD,EAAQmD,KAAKC,MAJtB,6BAQC,SC1EEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d8cef7d9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst api = {\n  key: \"8d4473d8a435911b0fb19182f26ff2f8\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\nconst URL = 'http://api.openweathermap.org/data/2.5/weather?q=Toronto&units=metric&appid=8d4473d8a435911b0fb19182f26ff2f8';\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      axios.get(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(function (response) {\n        // handle success\n        console.log(response.data);\n        setWeather(response.data);\n        setQuery('');\n      });\n    }\n  }\n\n  function capitalize_Words(str)\n  {\n    return str.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.weather[0].main === 'Rain') ? 'app rain' : \n        (weather.weather[0].main === 'Drizzle') ? 'app drizzle' : \n        (weather.weather[0].main === 'Thunder') ? 'app thunder' :\n        (weather.weather[0].main === 'Clear') ? 'app clear' :\n        (weather.weather[0].main === 'Snow') ? 'app snow' :\n        (weather.weather[0].main === 'Clouds') ? 'app clouds'  : 'app'):  'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input \n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n              <img \n                id=\"weatherIcon\" \n                src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} \n                alt=\"Current Weather Icon\"\n              />\n              {Math.round(weather.main.temp)}°C\n            </div>\n            <div className=\"weather\">\n              {capitalize_Words(weather.weather[0].description)}\n            </div>\n            <div className=\"minAndMax\">\n              Min: {weather.main.temp_min}°C&nbsp;&nbsp;&nbsp;\n              Max: {weather.main.temp_max}°C&nbsp;&nbsp;&nbsp;\n              Humidty: {weather.main.humidity}%&nbsp;&nbsp;&nbsp;\n              Wind: {weather.wind.speed} km/h&nbsp;&nbsp;&nbsp;\n            </div>\n          </div>\n        </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}